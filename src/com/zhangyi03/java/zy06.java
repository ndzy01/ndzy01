/*
 * 作者：zhangyi
 * 时间：2018.12.2
 * 功能：二进制学习
 */

/*
 * 知识储备
 * 1.计算机都是使用二进制的补码进行计算
 * 2.正数的二进制原码、反码、补码都是相同的
 * 3.负数的二进制原码：
 * 		负数的绝对值的二进制的最高位变为1（1是标志位，只用来表示正负，1表示负数，0表示是正数。所以八位二进制的取值范围是[-127,127]），其余位与正数原码相同。
 * 			例如：32，00100000  -32 最高位变为1：10100000
 *    	负数的反码：等于原码的最高位不变，其余取反 。
 *    		例如：-32  原码为：10100000，反码为：11011111
 *    	负数的补码：等于原码的最高位不变，其余取反，然后加一。
 *    		例如：-32 原码为：10100000，最高位不变取反：11011111，加一得补码：11100000
 */
/*
 * 知识储备
 * java中的按位运算4种
 * 1.按位&；2.按位|；3.按位非^;4.按位取反 ~0->1;1->0
 * java中的移位运算3种
 * >>,<<算数右移和算数左移 >>>逻辑右移
 * 算数右移 低位溢出，符号位不变，并用符号位补溢出高位
 * 算数左移 符号位不变，低位补零
 * 逻辑右移 低位溢出，高位补零
 */
package com.zhangyi03.java;

public class zy06 {
public static void main(String[] args) {
System.out.println("~-5:"+(~-5));
System.out.println("2&3:"+(2&3));
System.out.println("2|3:"+(2|3));
System.out.println("-3^3:"+(-3^3));

System.out.println("2<<2:"+(2<<2));
System.out.println("1>>2:"+(1>>2));
System.out.println("1>>>2:"+(1>>>2));
}
}
